using System;
using NUnit.Framework;
using LongModArithmetic;

namespace LongModArithmetics.Tests
{
    [TestFixture]
    public class ModCalculatorTests
    {
        [Test]
        [Description("Verifies that Mod function works correctly.")]
        [TestCase("3DFE932067AFAA31440188FA1A058D89E554EB475B2C", "AB45811C4601F13B", "48246FE994E00ABB")]
        [TestCase("380E49493F44D251CBC32D1DA04E5ED5035BAE51BF32D9F1B0E08C595BE77059A6F5C27DD7B63F015D4C14583", "CDACD5559953838CDD2BF714CC57E81347E86B3DB63EE", "2AA56B63F20F333197316F400656D6FA558F6B4D00363")]
        [TestCase("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", "F", "0")]
        public void TestMod(string hex1, string hex2, string expected)
        {
            var a = new Number(hex1);
            var b = new Number(hex2);
            ModCalculator modcalculator = new ModCalculator();
            Assert.AreEqual(expected, modcalculator.Mod(a, b).ToString());
        }


        [Test]
        [Description("Verifies that GCD function works correctly.")]
        [TestCase("4D0FFA257CCEA11EBAB1F01E65A77392D01F1", "48C1B463F2782F60D0", "1")]
        [TestCase("A", "5", "5")]
        [TestCase("1DF9E9A", "4", "2")]
        public void TestGCD(string hex1, string hex2, string expected)
        {
            var a = new Number(hex1);
            var b = new Number(hex2);
            ModCalculator modcalculator = new ModCalculator();
            Assert.AreEqual(expected, modcalculator.GCD(a, b).ToString());
        }


        [Test]
        [Description("Verifies that SteinGCD function works correctly.")]
        [TestCase("4D0FFA257CCEA11EBAB1F01E65A77392D01F1", "48C1B463F2782F60D0", "1")]
        [TestCase("A", "5", "5")]
        [TestCase("1DF9E9A", "4", "2")]
        [TestCase("8", "4", "4")]
        [TestCase("FFFFFF", "7", "7")]
        [TestCase("3", "5", "1")]
        [TestCase("112", "133", "1")]
        [TestCase("102", "133", "1")]
        public void TestSteinGCD(string hex1, string hex2, string expected)
        {
            var a = new Number(hex1);
            var b = new Number(hex2);
            ModCalculator modcalculator = new ModCalculator();
            Assert.AreEqual(expected, modcalculator.SteinGCD(a, b).ToString());
        }


        [Test]
        [Description("Verifies that BarrettReduction function works correctly.")]
        [TestCase("2BDC8D2D7DC4A0531CC7F391B4DAD2D99E20F03E3B0DA1CBF7F89AABAA6D5E84E5ABD5359CD7F12A948747A34076DB7F8E5F01706C489A8B7DE9AA157A383BD47A0EF44688FF88717CC8D0FBF3BA49368486BDE1915DEFE1916A4FA67C26AB25B408642ACC7EA8771CAFE4892F450845C8788038F50B7CBC9716FF6CD7466625",
                  "7", "3")]
        [TestCase("D66CCA25D693363EA73F4CF9C0003A80F77ADD6CA63CACD051CA6A6EC576EFA0EE1983BBDB1B6AB0D72E1778EBE1B287B90242125BB252D2F111A3B1C8369AAC7B697594636C55AD48D37A06F6944CC6A4F2825DC920AF7320DDF7C4F10DE36331BAD51B2272D2914AD1AD02C9527082325177A0AC272C6DEE89589F1236D0512976496ED2BEB12EDD4BC409D4628E24ED5A0A05A08A8793EBFCAEE4A33997BEB046E1E04E93C4CDC9AD7A8A925C17C0658BB482980398042A8B0286D948CFDC4ABDA30B07060A15DEF19E3B32F0F41AC2FE91FA49583ECE35B4F74A194B5C57E389C90FABB437859A8E71FC7473802D26D8572EC75E409D19410F30DFDDE220",
                  "7", "1")]
        [TestCase("D66CCA25D693363EA73F4CF9C0003A80F77ADD6CA63CACD051CA6A6EC576EFA0EE1983BBDB1B6AB0D72E1778EBE1B287B90242125BB252D2F111A3B1C8369AAC7B697594636C55AD48D37A06F6944CC6A4F2825DC920AF7320DDF7C4F10DE36331BAD51B2272D2914AD1AD02C9527082325177A0AC272C6DEE89589F1236D0512976496ED2BEB12EDD4BC409D4628E24ED5A0A05A08A8793EBFCAEE4A33997BEB046E1E04E93C4CDC9AD7A8A925C17C0658BB482980398042A8B0286D948CFDC4ABDA30B07060A15DEF19E3B32F0F41AC2FE91FA49583ECE35B4F74A194B5C57E389C90FABB437859A8E71FC7473802D26D8572EC75E409D19410F30DFDDE220",
                  "2", "0")]
        [TestCase("FF", "FF", "0")]
        [TestCase("5", "3", "2")]
        [TestCase("4", "3", "1")]
        [TestCase("2BDC8D2", "7", "4")]
        [TestCase("2B", "7", "1")]
        [TestCase("FFFFFFFF", "FFFF", "0")]
        [TestCase("AFAFAFAF", "FFFF", "5F5F")]
        [TestCase("10000000", "FFFF", "1000")]
        [TestCase("FFFFFAAAAFF32549877523487", "3F2782F60D0AD", "3D70A6B5AD60E")]
        [TestCase("8882FABDA2031571278293379", "3F2782F60D0AD", "7328466E5199")]
        [TestCase("11111FFFFF764239156912765", "3F2782F60D0AD", "388C3EF9AE13")]
        [TestCase("E3AE74A8EC74A313C8BED20D4349D9EFBA356FE6E8AD89E21C2D028111C06F422DC8E0F2E5F448830D1D61B5A7AEAC088E31AA290891E06AD83C0786443611AF",
                  "49FE1165CB7A21D12D6ACEC225285544B36BABD3F8B4DD8D94EDE1A444B9738ADF06CDB40DCAFA87B25A8BECA2D2262A53D8431A119405F0CBEFB83D2AD547CC",
                  "5B440778A063DA0407E65C6D3D0DA219FF26C6AFE8EF1395D635D94439414A190B477D6BC9358EBF60DBDEFBF38398992A8E0DAD3D5CE98746CDECEC3B63A4B")]
        [TestCase("17EFC320375C595D14B25E46B1D50B88D05E24FE722E536A32672BBD775105497475BB33FDF7965B087D34B7B22C16030619190621184AACBB415078BD9E199",
                  "3F304DFA2BBDA4896B3683D9F1F27BA74983B9A63B7926E2D2D0D6E75F863560",
                  "B81D9E67DCA2DB4F529F29234D0ECF650B61BF04B3F7A03B8B7D51F86B77FF9")]
        public void TestBarrettReduction(string hex1, string hex2, string expected)
        {
            var a = new Number(hex1);
            var b = new Number(hex2);
            ModCalculator modcalculator = new ModCalculator();
            Calculator calculator = new Calculator();
            Number one = new Number("1");
            Number zero = new Number(1);
            int k = calculator.BitLength(a);
            Number m = calculator.LongDiv(calculator.ShiftBitsToHigh(one, k), b, out zero);
            var r = modcalculator.BarrettReduction(a, b, k, m);
            Assert.AreEqual(expected, r.ToString());
        }
        

        [Test]
        [Description("Verifies that LongModPowerBarrett works correctly.")]
        [TestCase("AB9399181470F", "FFAF", "9328F", "460D8")]
        [TestCase("1391EBEB3343A6ACC419834C349DCFE7ED55FDE8335513E03376B700962C1E3B",
                  "168473090D109D3687F730B18678A90E0505BB74D7726EBA1B543F3FBA8F811E",
                  "3F304DFA2BBDA4896B3683D9F1F27BA74983B9A63B7926E2D2D0D6E75F863560",
                   "7A88A35BF435FBC3E4F1A36EE227193767F5FA5926C9FCB601B3030A14E3C89")]
        [TestCase("2E151CB", "10C2", "23413", "227E2")]
        [TestCase("AB9399181470F","0","9328F","1")]
        [TestCase("AB9399181470F", "1", "9328F", "18D9C")]
        [TestCase("82", "6C", "133", "111")]
        [TestCase("CE14CE6CE8ABB9CF69E34F839FF643C175B36E9443A58454A069D05FFE67ADD",
                  "3B9FFA83DB3AA0BC929D8AA2E72297EE3D6F93EEF3794134EF322E71431B0C88",
                  "18B44D8D06EE4E5D2254687FF927BB1D464CC8509B6E7498353B2BDE38A1AA4F",
                  "44DDF4A20BCF8F7DECA3181B34DC6FCEBCD4C5CFB2FADCED44A8199155D0B02")]
        [TestCase("D7D4E59BB8FB8FBB26248B080419CEE82A2AFC255039A91578C9688078C29EA9B854AA136CFB2DD64B9A183382B71EB1DC86DB1C769D29BD8C692D0B511F0AB9",
                  "5B09B27F43A9DB4A1D6678B2B0EB892FA25A44D6BAAFF3EC166E1574140F7B223DDFD35ABA9AE1FEC3BACB7FFF9978A45AE85C57A44F2B1DAF3A0F8318D08F28",
                  "CC3365DF507C65CA79EE7157CC68C811A20768FCB725DCF3FB803101906DE98E89968468A891B8E09FEFF5441FBC8811D9425029B82B85D4C4AB8BA99D4E1A51",
                  "1212547770D32AD794DFC47DB0962CA5C85EE1C60AD9BC7C0BA52E266844B1F587008979D536FC67EE3119E8727BF49DB849F339DF27D753507B9C66D641BD66")]
        [TestCase("B3F708CCE04A576E0018481A037F048FE4153F2811934E8DCAE9AABF24AE71E93A08627E27BCA141EA15F5E6E7A4FBB0E1975BB205C1A865189DB2D0A681ED9E4682371EF389FFED452AE1BD42BCB7951404A030297395F4A7356B22920EAD22AB63D726999002B8DAF95DD901E2E57F6F0BF5EB0E7FE18C05AEF814957229A3",
                  "9186E895E7F9449140EB43E6473FC580E29BEA9C9DA779AE88C08B94593DC7D635D25E050912BBE881EBB257ABE979F4CD8FA11BDCEBD86B71B0D67776F666894B6D816C8045AE6E35FAAA4733D91C5D7C3053F0756149E1D17BB29E09A21137EE9A4F3246497C3F9D617B99FDD941AC31751D2435F38ED36EDDAF0B23BB448B",
                  "ACDB497D01070220320A380B81241CBAB49A622EDA9296C85F95B9AF3348035AB6827023A1B6A2708C75A7EB0BDC84B0B62A6043BCF796633BA4A95F770AB8431C5A15E641D48EF7653C949D5DFEFF4019D4FCB2D62348E5A97CA3C346A0C3EC8BA4B42E4FED44C7D1F85A1BF0D2CF9E1E335FBE92B9C8FF01C8D4CB014EA9AF",
                  "10A7B2784DF6B061AB091DC97137011BACE1280BB722C213858014A5BE51D935AF962F8C87303F654F0698FDE92BE63590FCC9C0EB72206268B8EACB55C21DD19F2A80273DCD7FE170EB5E7723E26F931EEC552C5F761744A3B6F67ED557E204882DE8EB96E998EBE042CF9693DB7460DB35395F94329136A1341A66B8D962B9")]
        [TestCase("FFFFFFFFFFFFFFFFFFFFFFFFFF", "FFFFFFFFFFF", "FF", "0")]
        [TestCase("41", "99", "133", "1")]
        public void TestLongModPowerBarrett(string hex1, string hex2, string hex3, string expected)
        {
            var a = new Number(hex1);
            var b = new Number(hex2);
            var n = new Number(hex3);
            ModCalculator modcalculator = new ModCalculator();
            var r = modcalculator.LongModPowerBarrett(a, b, n);
            Assert.AreEqual(expected, r.ToString());
        }
    }
}
